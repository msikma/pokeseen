/**
 * pokeseen - <https://github.com/msikma/pokeseen>
 * Copyright © 2018, Michiel Sikma
 */

import fs from 'fs'
import path from 'path'
import React from 'react'
import ReactDOMServer from 'react-dom/server'
import getRepoInfo from 'repoinfojs'
import moment from 'moment'
import { get, xor } from 'lodash'
import classnames from 'classnames'

import { pkgData, epURL, pokedex } from './data'
import { saveFile } from './util/saveFile'

const modulesPath = path.resolve(__dirname, '..', 'node_modules')
const docsPath = path.resolve(__dirname, '..', 'docs')
const staticPath = path.resolve(__dirname, '..', 'static')

const never = 'Never seen'

/**
 * Generates and saves an HTML page containing the appearance data
 * generated by sortPokemonByAppearances().
 */
export const createSeenPage = async (appearancesRanking, lastSeenRanking, airedEpisodesList) => {
  // Generate some data from the repo.
  const repoInfo = await getRepoInfo()
  const data = {
    version: pkgData.version,
    commits: repoInfo.commits,
    hash: repoInfo.hash,
    homepage: pkgData.homepage,
    generationTime: moment().format('YYYY-MM-DD HH:mm:ss ZZ')
  }
  // Render our React component to HTML and save it using the wrapper string.
  const lastSeenRankingByID = lastSeenRanking
    .map((item, n) => ({ ...item, n }))
    .reduce((acc, item) => ({ ...acc, [item.id]: item }), {})
  const pageMarkup = ReactDOMServer.renderToStaticMarkup(<SeenPage { ...{ lastSeenRankingByID, appearancesRanking, airedEpisodesList, ...data } } />)
  await saveFile(`${docsPath}/index.html`, wrapPage(pageMarkup, data))

  // Copy over some necessary files.
  await copyFile(`${modulesPath}/pokesprite/pokesprite.png`, docsPath)
  await copyFile(`${modulesPath}/pokesprite/overview.min.css`, docsPath)
  await copyFile(`${modulesPath}/pokesprite/pokesprite.min.css`, docsPath)
  await copyFile(`${modulesPath}/pokesprite/pokesprite.min.js`, docsPath)
  await copyFile(`${staticPath}/pokeseen.css`, docsPath)
  await copyFile(`${staticPath}/pokeseen.js`, docsPath)

  console.log(`Saved PokéSeen page to ${docsPath}/index.html and copied over static resources`)
}

/**
 * Copies a file from a path to a destination directory.
 */
const copyFile = (src, destDir) => new Promise((resolve, reject) => {
  const dest = `${destDir}/${path.basename(src)}`
  fs.copyFile(src, dest, (err) => {
    if (err) return reject(err)
    return resolve()
  })
})

/**
 * Main component.
 *
 * The Pokémon ranking data uses the following format:
 *
 * [ { id: '789',
 *     amount: 9,
 *     lastSeen: { ja: '2018-05-10', us: '2018-04-07' } }, ... ]
 */
const SeenPage = ({ lastSeenRankingByID, appearancesRanking, airedEpisodesList, version, commits, hash, homepage, generationTime }) => (
  <div id="top">
    <div className="description">
      <div className="header">
        <h1>Pokémon TV appearance statistics</h1>
        <p>This page ranks Pokémon based on how many times they've appeared in the TV show and lists when we last saw them.</p>
        <p>このページは、ポケモンがアニメに何度登場したか、いつ最後に登場したかを確認できます。</p>
      </div>
      <div className="docs-container">
        <p>
          「登場数」はポケモンがアニメに何度登場したか示してあります。また、「最後の登場」はポケモンが最後に登場したエピソードの日程を示してあります。
          テーブルの行をクリックするとそのポケモンが登場したエピソードのリストを見ることができます。
          このランキングは現在{ airedEpisodesList.length }エピソードのデータを基にしてます
        </p>
        <p>質問やコメントがあれば、ツイッターで連絡してください：<a href="https://twitter.com/dada78641">@dada78641</a>.</p>
        <p>
          <em>Appearances</em> lists the number of episodes the Pokémon has appeared in.
          Its <em>last appearance</em> is based on the Japanese episode schedule.
          Click on a Pokémon's table row to see the list of episodes it has appeared in.
          The ranking uses statistics from the currently released { airedEpisodesList.length } episodes.
        </p>
        <p>For questions or comments you can contact me on Twitter: <a href="https://twitter.com/dada78641">@dada78641</a>.</p>
        <p id="generation_time">Generated <span className="time-abs-prefix">on</span><span className="time" data-time={ +new Date(generationTime) } title={ generationTime }>{ generationTime }</span>.</p>
        <script dangerouslySetInnerHTML={{__html: `PokeSeen.humanizeGenerationTime()` }}></script>
      </div>
    </div>
    <table className="table pkspr-overview" id="data_table">
      <tbody>
        <tr>
          <th>#</th>
          <th>ID</th>
          <th>Icon</th>
          <th colSpan={ 2 }>Name/名前</th>
          <th><a href="#" className="sort-link active" id="appearance_sort"><span className="regular-label">Appearances/登場数</span><span className="small-label">Eps</span></a></th>
          <th colSpan={ 3 } className="last-episode-col"><a href="#" className="sort-link" id="last_seen_sort"><span className="regular-label">Last appearance/最後の登場</span><span className="small-label">Last seen/最後の登場</span></a></th>
        </tr>
        <script dangerouslySetInnerHTML={{__html: `PokeSeen.decorateSorters('appearance_sort', 'last_seen_sort')` }}></script>
        { appearancesRanking.map((pokemon, n) => {
          // Construct two rows: one with the sorted data, and one with the episode IDs.
          const { id, amount, lastSeen, episodes } = pokemon

          // Determine the last time this Pokémon was seen, if ever.
          // The relative time is later humanized dynamically.
          const lastJa = get(lastSeen, 'ja', never)
          const lastJaInt = moment().diff(moment(lastJa), 'ms')
          // const lastUS = get(lastSeen, 'us', never)
          // const lastUSInt = moment().diff(moment(lastUS), 'ms')
          const neverSeenJa = !lastJa || lastJa === never
          // const neverSeenUS = !lastUS || lastUS === never

          // Check if it's faster to see which episodes a Pokémon did *not* appear in.
          const episodesInverse = xor(airedEpisodesList, episodes)

          const pkmnInfo = pokedex[id]

          const cols = 9
          const isLast = n === appearancesRanking.length - 1

          // If listing fewer than this amount of episodes, switch to a different layout.
          const fewEpisodes = 12

          // Sort order. All * 2, since we've actually got two rows per item.
          const orderAppearances = n * 2
          const orderLastSeen = lastSeenRankingByID[id].n * 2

          // Whether to use 'appears in all episodes *except*' type lists if they are shorter.
          const useExceptLists = false

          // The last episode it appeared in.
          const lastEpisode = episodes[episodes.length - 1]
          const lastSeries = lastEpisode ? lastEpisode.slice(0, 2).toLowerCase() : ''

          return [
            <tr
              key={ `main_info_${id}` }
              id={ `item_${id}` }
              className={ classnames('main-info', { 'last': isLast }) }
              data-id={ id }
              data-last-seen-n={ orderLastSeen }
              data-appearances-n={ orderAppearances }
            >
              <td className="minimal id">{ n + 1 }</td>
              <td className="minimal">{ id }</td>
              <td className="minimal"><span id={ `icon_${id}` } className={ `pkspr pkmn-${pkmnInfo.slug.eng}` }></span></td>
              <td className="name name-en">{ pkmnInfo.name.eng }</td>
              <td className="name name-jp"><span title={ pkmnInfo.name.jpn_ro }>{ pkmnInfo.name.jpn }</span></td>
              <td>{ amount }</td>
              <td className={ neverSeenJa ? 'never' : `last-episode series series-${lastSeries}` } { ...(neverSeenJa ? { colSpan: 3 } : {}) }><span>{ neverSeenJa ? never : lastEpisode }</span></td>
              { !neverSeenJa ? <td className="last-ja">{ lastJa }</td> : null }
              { !neverSeenJa ? <td className="time-ago" data-time-ago-ms={ isNaN(lastJaInt) ? -1 : lastJaInt }></td> : null }
            </tr>,
            <tr
              id={ `episodes_${id}` }
              className={ classnames('episode-info', { last: isLast }) }
              data-id={ id }
              data-last-seen-n={ orderLastSeen + 1 }
              data-appearances-n={ orderAppearances + 1 }
              key={ `ep_info_${id}` }
            >
              { episodesInverse.length === 0
                ? <td colSpan={ cols } className="ep-cols-container">Appears in every episode to date.</td>
                : episodes.length === 0
                  ? <td colSpan={ cols } className="ep-cols-container">No appearances in the TV series.</td>
                  : episodesInverse.length > episodes.length || !useExceptLists
                    ? (
                      <td colSpan={ cols } className="ep-cols-container">
                        <div className={ classnames('ep-cols', { short: episodes.length < fewEpisodes }) }>
                          <div className="ep-header">Appears in:<br />登場エピソード：</div>
                          <ul className="ep-content">{ episodes.map(ep => (<li key={ ep }><a target="_blank" href={ epURL(ep) }>{ ep }</a></li>)) }</ul>
                        </div>
                      </td>
                    )
                    : (
                      <td colSpan={ cols } className="ep-cols-container">
                        <div className={ classnames('ep-cols', { short: episodesInverse.length < fewEpisodes }) }>
                          <div className="ep-header">Appears in every episode <em>except</em>:</div>
                          <ul className="ep-content">{ episodesInverse.map(ep => (<li key={ ep }><a target="_blank" href={ epURL(ep) }>{ ep }</a></li>)) }</ul>
                        </div>
                      </td>
                    ) }
            </tr>,
            <script key={ `js_${id}` } dangerouslySetInnerHTML={{__html: `PkSpr.decorate('icon_${id}')\nPokeSeen.decorate('${id}')` }}></script>
          ]
        })}
      </tbody>
    </table>
    <div className="description">
      <div className="docs-container closing">
        <p>Pokémon is © 1995-{ (new Date().getFullYear()) } Nintendo/Creatures Inc./GAME FREAK Inc.</p>
        <p>The source code for this page is available on <a href="https://github.com/msikma/pokeseen">Github</a>. Statistics were determined from <a href="https://bulbapedia.bulbagarden.net/">Bulbapedia</a> data.</p>
      </div>
    </div>
  </div>
)

/**
 * Base HTML wrapper for the template page.
 */
const wrapPage = (str, { version, commits, hash, homepage, generationTime }) => (
  `<!doctype html>
<html lang="en">
<!--

PokéSeen v${version} (r${commits}, [${hash}]) <${homepage}>
Generated on ${generationTime}.

-->
<head>
  <meta charset="utf-8" />
  <title>Pokémon appearance statistics</title>
  <meta name="viewport" content="width=586,initial-scale=1" />
  <link type="text/css" href="pokesprite.min.css" rel="stylesheet" media="screen" />
  <link type="text/css" href="overview.min.css" rel="stylesheet" media="screen" />
  <link type="text/css" href="pokeseen.css" rel="stylesheet" media="screen" />

  <meta property="og:title" content="Pokémon appearance statistics" />
  <meta property="og:url" content="https://msikma.github.io/pokeseen/" />
  <meta property="og:description" content="Statistics about how often each Pokémon appears in the TV show and when we last saw them" />

  <script charset="utf-8" src="pokesprite.min.js" ></script>
  <script charset="utf-8" src="pokeseen.js" ></script>
</head>
<body>
${str}
</body>
</html>`
)
